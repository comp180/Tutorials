{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Functions\n",
    "\n",
    "Functions are used in R to carry out specified tasks. They reduce the amount of code you need to write and make the code easier to understand. These functions can include multiple arguments, and they can also return one or more values. We will discuss parameters and return values later in the tutorial, but for now, let's learn about how to create functions!\n",
    "\n",
    "## Defining a function\n",
    "\n",
    "<b>Steps:</b>\n",
    "<ol type = \"1\">\n",
    "    <li> Use a String to create a name for function, and an arrow pointing from the keyword \"function\" to the name of the function to declare it. </li>\n",
    "    <li> Add parameters to the function: they should be within the parantheses that follow the word \"function\". Follow the parantheses with curly brackets indicate the body of the function. </li>\n",
    "    <li> Within the function body, include code statements that the function should execute. </li> \n",
    "    <li> End your function with a return statement if the function should output something such as an integer or String. If you don't have a return statement, the function will return an object None. </li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a function that prints Hello, World!\n",
    "helloWorld <- function() {\n",
    "    cat(\"Hello, World!\");\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calling a function\n",
    "\n",
    "When one calls a function, he or she wants to execute the function that they have defined. In R, one can call a function simply by typing the name of the function with its parantheses and running the statement. If the function has arguments, the user needs to make sure to supply them before calling the function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!"
     ]
    }
   ],
   "source": [
    "helloWorld()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding Docstrings to an R Function\n",
    "\n",
    "Docstrings describe what your function does, such as the computations it performs or the values it returns. Docstrings serve as documentation for your function, so others who want to execute your function know its behavior and know what to expect when it is run. \n",
    "\n",
    "Function docstrings are placed in the immediate line after the function header and are placed next to # since they are comments.\n",
    "\n",
    "We are going to add docstrings to our hello_world() function to convey how docstrings are used. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!"
     ]
    }
   ],
   "source": [
    "helloWorld <- function() {\n",
    "    # Prints Hello, World!\n",
    "    # Returns: None \n",
    "    cat('Hello, World!');\n",
    "}\n",
    "helloWorld()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Function Arguments in R\n",
    "\n",
    "Arguments are the things that are given to any function or method call. \n",
    "\n",
    "There are four types of arguments that R functions can take:\n",
    "<ol type = \"1\">\n",
    "    <li> Default arguments </li>\n",
    "    <li> Required arguments </li>\n",
    "    <li> Keyword arguments </li>\n",
    "    <li> Variable number of arguments </li> \n",
    "</ol>\n",
    "    \n",
    "### Default arguments \n",
    "\n",
    "Default arguments are those that take a default value if no argument value is passed during the function call. You can assign this default value with the assignment operator \"=\". In the following example, we set a,b=2 in the parantheses of the function, which is the default value of the variables a & b. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3"
     ]
    }
   ],
   "source": [
    "plus <- function(a=3,b=2){\n",
    "    return (a+b)\n",
    "}\n",
    "\n",
    "#Returns 3\n",
    "cat(plus(a=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6"
     ]
    }
   ],
   "source": [
    "#Returns 6\n",
    "cat(plus(b=3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Required arguments \n",
    "\n",
    "Required arguments are those values that have to be passed during a function call; they also need to be in exactly the right order. In the following example, since a & b are not given default values, whenever a user wants to call the plus() function, he or she needs to specify values for BOTH a & b. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7"
     ]
    }
   ],
   "source": [
    "plus <- function(a,b){\n",
    "    return (a+b)\n",
    "}\n",
    "\n",
    "cat(plus(3,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keyword arguments\n",
    "\n",
    "Keyword arguments can be used to ensure that all of the parameters of a function are called in the right order. We use keyword arguments to identify the arguments by their parameter name. For example, using the function from above, if we wanted to use keyword arguments, we would assign specific values to a & b with the assignment operator \"=\". "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7"
     ]
    }
   ],
   "source": [
    "cat(plus(a=3,b=4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variable number of arguments\n",
    "\n",
    "If you are unsure about the exact number of arguments that you want to pass to a function, you can use \"...\" in the parantheses of your function header. You can also provide any variable name before the \"...\", as long as the \"...\" follows the variable name. We will provide an example by modifying the plus() function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "20"
      ],
      "text/latex": [
       "20"
      ],
      "text/markdown": [
       "20"
      ],
      "text/plain": [
       "[1] 20"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "new.plus <- function(...) {\n",
    "    return (sum(...));\n",
    "}\n",
    "\n",
    "#Prints 20\n",
    "new.plus(2,4,6,8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We used R's built-in sum() function to create the function above. However, you could also get the same result by doing the first converting the ... into a vector and using a for-each loop to iterate through the vector. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "20"
      ],
      "text/latex": [
       "20"
      ],
      "text/markdown": [
       "20"
      ],
      "text/plain": [
       "[1] 20"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "new.plus <- function(...) {\n",
    "    total <- 0;\n",
    "    arguments <- c(...);\n",
    "    for(i in 1:length(arguments)){\n",
    "        total= total + arguments[i];\n",
    "    }\n",
    "    return (sum(...));\n",
    "}\n",
    "\n",
    "#Prints 20\n",
    "new.plus(2,4,6,8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Return Statements\n",
    "\n",
    "Return statements are used to return various values in functions, such as a String, an integer, etc. \n",
    "\n",
    "R can only return one object in its return statement. However, you can return a list which can hold multiple values, like in the example below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<dl>\n",
       "\t<dt>$total</dt>\n",
       "\t\t<dd>5</dd>\n",
       "\t<dt>$number</dt>\n",
       "\t\t<dd>3</dd>\n",
       "</dl>\n"
      ],
      "text/latex": [
       "\\begin{description}\n",
       "\\item[\\$total] 5\n",
       "\\item[\\$number] 3\n",
       "\\end{description}\n"
      ],
      "text/markdown": [
       "$total\n",
       ":   5\n",
       "$number\n",
       ":   3\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "$total\n",
       "[1] 5\n",
       "\n",
       "$number\n",
       "[1] 3\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plus <- function(a,b) {\n",
    "    sum = a + b;\n",
    "    list(\"total\" = sum, \"number\" = a);\n",
    "}\n",
    "\n",
    "#Unpack variables\n",
    "#sum = 5\n",
    "#a = 3\n",
    "\n",
    "plus(3,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To access one of the return values at a time, use the $ to specify which one you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "5"
      ],
      "text/latex": [
       "5"
      ],
      "text/markdown": [
       "5"
      ],
      "text/plain": [
       "[1] 5"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plus(3,2)$total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Global vs. Local Variables \n",
    "\n",
    "Variables that are defined inside a function body have a local scope, while those that are defined outside a function body have a global scope. \n",
    "\n",
    "Local variables can only be accessed and manipulated within the body of the function of which they are defined. Global variables can be accessed by all functions within your program. \n",
    "\n",
    "The following example shows how the global variable \"g_var\" can be accessed outside of the function body; however, the local variable \"total\" is unable to be printed out outside of the function body of the plus() function. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'Total: 9'"
      ],
      "text/latex": [
       "'Total: 9'"
      ],
      "text/markdown": [
       "'Total: 9'"
      ],
      "text/plain": [
       "[1] \"Total: 9\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "'this is the initialized value: 1'"
      ],
      "text/latex": [
       "'this is the initialized value: 1'"
      ],
      "text/markdown": [
       "'this is the initialized value: 1'"
      ],
      "text/plain": [
       "[1] \"this is the initialized value: 1\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Global variable\n",
    "g_var <- 1\n",
    "\n",
    "# Define `plus()` function to accept a variable number of arguments\n",
    "plus <- function(g_var, ...){\n",
    "    # Local variable `sum()`\n",
    "   total <- 0;\n",
    "    arguments <- c(...);\n",
    "    for(i in 1:length(arguments)){\n",
    "        total= total + arguments[i];\n",
    "    }\n",
    "    return (sum(...));\n",
    "}\n",
    "\n",
    "paste(\"Total:\", plus(g_var, 2,3,4));\n",
    "\n",
    "# Access the global variable\n",
    "paste(\"this is the initialized value:\", g_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in paste(\"this is the sum\", total): object 'total' not found\n",
     "output_type": "error",
     "traceback": [
      "Error in paste(\"this is the sum\", total): object 'total' not found\nTraceback:\n",
      "1. paste(\"this is the sum\", total)"
     ]
    }
   ],
   "source": [
    "# (Try to) access the local variable\n",
    "paste(\"this is the sum\", total)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Helpful Resources\n",
    "\n",
    "https://www.statmethods.net/management/userfunctions.html\n",
    "\n",
    "https://www.datacamp.com/community/tutorials/functions-in-r-a-tutorial"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
